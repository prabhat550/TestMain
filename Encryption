 package com.rumango.batch.config;
 
 import java.security.spec.KeySpec;
 import java.util.Base64;
 import javax.crypto.Cipher;
 import javax.crypto.SecretKey;
 import javax.crypto.SecretKeyFactory;
 import javax.crypto.spec.IvParameterSpec;
 import javax.crypto.spec.PBEKeySpec;
 import javax.crypto.spec.SecretKeySpec;
 import org.springframework.stereotype.Service;
 
 @Service
 public class Encryption {
   public static void main1(String[] args) {
     String originalString = "jdbc:sqlserver://10.1.9.197;database=CSMA;";
     com.rumango.batch.config.Encryption encryption = new com.rumango.batch.config.Encryption();
     String encryptedString = encryption.encrypt("jdbc:sqlserver://10.1.0.195", "RBM2019!");
     String decryptedString = encryption.decrypt(encryptedString, "RBM2019!");
     String username = encryption.decrypt("21sYk/D4SGQjcOjV92aeqq6+MEgeWCmDoctTmFfTWTA=", "PBM2019!");
     String url = encryption.decrypt("uMwalMspdRf36PpKxo/R6Q==", "RBM2019!");
     String password = encryption.decrypt("KKnML9legLusyHG+Yj4fJg==", "PBM2019!");
     System.out.println("username :: " + username);
     System.out.println("url :: " + url);
     System.out.println("password :: " + password);
     System.out.println(encryptedString);
   }
   
   public String encrypt(String strToEncrypt, String secret) {
     try {
       String salt = "RBM!!!!";
       byte[] iv = { 
           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
           0, 0, 0, 0, 0, 0 };
       IvParameterSpec ivspec = new IvParameterSpec(iv);
       SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
       KeySpec spec = new PBEKeySpec(secret.toCharArray(), salt.getBytes(), 65536, 256);
       SecretKey tmp = factory.generateSecret(spec);
       SecretKeySpec secretKey = new SecretKeySpec(tmp.getEncoded(), "AES");
       Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
       cipher.init(1, secretKey, ivspec);
       return Base64.getEncoder().encodeToString(cipher.doFinal(strToEncrypt.getBytes("UTF-8")));
     } catch (Exception e) {
       System.out.println("Error while encrypting: " + e.toString());
       return null;
     } 
   }
   
   public String decrypt(String strToDecrypt, String secret) {
     try {
       String salt = "RBM!!!!";
       System.err.println("strToDecrypt->" + strToDecrypt + ", secret->" + secret);
       byte[] iv = { 
           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
           0, 0, 0, 0, 0, 0 };
       IvParameterSpec ivspec = new IvParameterSpec(iv);
       SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
       KeySpec spec = new PBEKeySpec(secret.toCharArray(), salt.getBytes(), 65536, 256);
       SecretKey tmp = factory.generateSecret(spec);
       SecretKeySpec secretKey = new SecretKeySpec(tmp.getEncoded(), "AES");
       Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
       cipher.init(2, secretKey, ivspec);
       return new String(cipher.doFinal(Base64.getDecoder().decode(strToDecrypt)));
     } catch (Exception e) {
       System.out.println("Error while decrypting: " + e.toString());
       e.printStackTrace();
       return null;
     } 
   }
 }
